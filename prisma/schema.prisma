generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String?
  accounts      Account[]
  HostelUsers   HostelUsers[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @db.VarChar(255)
  content     String?
  isPublished Boolean  @default(false)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Hostel {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  created_at         DateTime      @default(now()) @db.Timestamptz(6)
  poster_accessToken String?
  poster_account     String?
  poster_redirectUri String?
  mews_apikey        String?
  mews_propertyID    String?
  mews_outletId      String?
  mews_customerId    String?
  hostelId           String?       @db.Uuid
  Hostel             Hostel?       @relation("HostelToHostel", fields: [hostelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Hostel       Hostel[]      @relation("HostelToHostel")
  HostelUsers        HostelUsers[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model HostelUsers {
  hostelId String @db.Uuid
  userId   String
  Hostel   Hostel @relation(fields: [hostelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User     User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([hostelId, userId])
}

enum Role {
  USER
  ADMIN
}
